From 2c5d21927e470428377f252ce9a01d762e656f2f Mon Sep 17 00:00:00 2001
From: Alex Henrie <alexhenrie24@gmail.com>
Date: Mon, 12 Oct 2015 19:21:04 -0600
Subject: [PATCH 3/3] Add groupwise measure "SimUI Zero"

---
 .../groupwise/dag/Sim_groupwise_DAG_UI_Zero.java   | 67 ++++++++++++++++++++++
 .../java/slib/sml/sm/core/utils/SMConstants.java   | 10 ++++
 2 files changed, 77 insertions(+)
 create mode 100755 slib-sml/src/main/java/slib/sml/sm/core/measures/graph/groupwise/dag/Sim_groupwise_DAG_UI_Zero.java

diff --git a/slib-sml/src/main/java/slib/sml/sm/core/measures/graph/groupwise/dag/Sim_groupwise_DAG_UI_Zero.java b/slib-sml/src/main/java/slib/sml/sm/core/measures/graph/groupwise/dag/Sim_groupwise_DAG_UI_Zero.java
new file mode 100755
index 0000000..98d2f50
--- /dev/null
+++ b/slib-sml/src/main/java/slib/sml/sm/core/measures/graph/groupwise/dag/Sim_groupwise_DAG_UI_Zero.java
@@ -0,0 +1,67 @@
+/*
+ *  Copyright or © or Copr. Ecole des Mines d'Alès (2012-2014)
+ *
+ *  This software is a computer program whose purpose is to provide
+ *  several functionalities for the processing of semantic data
+ *  sources such as ontologies or text corpora.
+ *
+ *  This software is governed by the CeCILL  license under French law and
+ *  abiding by the rules of distribution of free software.  You can  use,
+ *  modify and/ or redistribute the software under the terms of the CeCILL
+ *  license as circulated by CEA, CNRS and INRIA at the following URL
+ *  "http://www.cecill.info".
+ *
+ *  As a counterpart to the access to the source code and  rights to copy,
+ *  modify and redistribute granted by the license, users are provided only
+ *  with a limited warranty  and the software's author,  the holder of the
+ *  economic rights,  and the successive licensors  have only  limited
+ *  liability.
+
+ *  In this respect, the user's attention is drawn to the risks associated
+ *  with loading,  using,  modifying and/or developing or reproducing the
+ *  software by the user in light of its specific status of free software,
+ *  that may mean  that it is complicated to manipulate,  and  that  also
+ *  therefore means  that it is reserved for developers  and  experienced
+ *  professionals having in-depth computer knowledge. Users are therefore
+ *  encouraged to load and test the software's suitability as regards their
+ *  requirements in conditions enabling the security of their systems and/or
+ *  data to be ensured and,  more generally, to use and operate it in the
+ *  same conditions as regards security.
+ *
+ *  The fact that you are presently reading this means that you have had
+ *  knowledge of the CeCILL license and that you accept its terms.
+ */
+package slib.sml.sm.core.measures.graph.groupwise.dag;
+
+import java.util.Set;
+import org.openrdf.model.URI;
+
+import slib.sml.sm.core.engine.SM_Engine;
+import slib.sml.sm.core.utils.SMconf;
+import slib.utils.impl.SetUtils;
+
+/**
+ * Gentleman R: Visualizing and distances using GO. Retrieved Jan. 10th 2007.
+ * http://www.bioconductor.org/packages/release/bioc/vignettes/GOstats/inst/doc/GOvis.pdf
+ *
+ * Modified so that the score drops to zero if the two sets being compared have
+ * only the root in common.
+ *
+ * @author Sébastien Harispe (sebastien.harispe@gmail.com)
+ *
+ */
+public class Sim_groupwise_DAG_UI_Zero extends Sim_groupwise_DAG_abstract {
+
+
+    @Override
+    public double compare(Set<URI> setA, Set<URI> setB, SM_Engine rc, SMconf conf) {
+
+        Set<URI> anc_setA = rc.getAncestorsInc(setA);
+        Set<URI> anc_setB = rc.getAncestorsInc(setB);
+
+        Set<URI> intersection = SetUtils.intersection(anc_setA, anc_setB);
+        Set<URI> union = SetUtils.union(anc_setA, anc_setB);
+
+        return (double) (intersection.size() - 1) / (union.size() - 1);
+    }
+}
diff --git a/slib-sml/src/main/java/slib/sml/sm/core/utils/SMConstants.java b/slib-sml/src/main/java/slib/sml/sm/core/utils/SMConstants.java
index 49c9fa5..4b365fb 100755
--- a/slib-sml/src/main/java/slib/sml/sm/core/utils/SMConstants.java
+++ b/slib-sml/src/main/java/slib/sml/sm/core/utils/SMConstants.java
@@ -56,6 +56,7 @@ import slib.sml.sm.core.measures.graph.groupwise.dag.Sim_groupwise_DAG_NTO_MAX;
 import slib.sml.sm.core.measures.graph.groupwise.dag.Sim_groupwise_DAG_NTO;
 import slib.sml.sm.core.measures.graph.groupwise.dag.Sim_groupwise_DAG_TO;
 import slib.sml.sm.core.measures.graph.groupwise.dag.Sim_groupwise_DAG_UI;
+import slib.sml.sm.core.measures.graph.groupwise.dag.Sim_groupwise_DAG_UI_Zero;
 import slib.sml.sm.core.measures.graph.pairwise.dag.edge_based.Sim_pairwise_DAG_edge_Eilbeck1;
 import slib.sml.sm.core.measures.graph.pairwise.dag.edge_based.Sim_pairwise_DAG_edge_Kyogoku_basic_2011;
 import slib.sml.sm.core.measures.graph.pairwise.dag.edge_based.Sim_pairwise_DAG_edge_Leacock_Chodorow_1998;
@@ -313,6 +314,10 @@ public final class SMConstants {
     /**
      *
      */
+    public static final String FLAG_SIM_GROUPWISE_DAG_UI_ZERO = "SIM_GROUPWISE_DAG_UI_ZERO";
+    /**
+     *
+     */
     public static final String FLAG_SIM_GROUPWISE_DAG_ALI_DEANE = "SIM_GROUPWISE_DAG_ALI_DEANE";
     /**
      *
@@ -346,6 +351,10 @@ public final class SMConstants {
     /**
      *
      */
+    public static final String SIM_GROUPWISE_DAG_UI_ZERO = Sim_groupwise_DAG_UI_Zero.class.getName();
+    /**
+     *
+     */
     public static final String SIM_GROUPWISE_DAG_ALI_DEANE = Sim_groupwise_DAG_Ali_Deane.class.getName();
     /**
      *
@@ -365,6 +374,7 @@ public final class SMConstants {
             put(FLAG_SIM_GROUPWISE_DAG_NTO_MAX, SIM_GROUPWISE_DAG_NTO_MAX);
             put(FLAG_SIM_GROUPWISE_DAG_TO, SIM_GROUPWISE_DAG_TO);
             put(FLAG_SIM_GROUPWISE_DAG_UI, SIM_GROUPWISE_DAG_UI);
+            put(FLAG_SIM_GROUPWISE_DAG_UI_ZERO, SIM_GROUPWISE_DAG_UI_ZERO);
             put(FLAG_SIM_GROUPWISE_DAG_ALI_DEANE, SIM_GROUPWISE_DAG_ALI_DEANE);
             put(FLAG_SIM_GROUPWISE_SVM, SIM_GROUPWISE_SVM); // TODO move groupwise standalone
             putAll(SIM_FRAMEWORK_DAG_SET_BASED);
-- 
2.6.1

